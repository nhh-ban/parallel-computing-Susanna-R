# Lets use some funcionality for storing how low time it takes to complete the calculation
library(tictoc)
# Lets use some funcionality for storing how low time it takes to complete the calculation
install.packages(tictoc)
# Lets use some funcionality for storing how low time it takes to complete the calculation
install.packages("tictoc")
library(tictoc)
tic()
Sys.sleep(1)
toc()
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Test")
Sys.sleep(1)
toc(log = TRUE)
View(printTicTocLog)
View(test_neg_equity)
printTicTocLog() %>%
knitr::kable()
df_results <-
expand.grid(date = df$date,
lead_days = c(1, 5, 10, 30, 60)) %>%
mutate(neg_eq = NA) %>%
as_tibble()
tic.clearlog()
tic("Regular loop")
for (i in 1:nrow(df_results)) {
df_results$neg_eq[i] <-
test_neg_equity(df,
startdate = df_results$date[i],
lead_days = df_results$lead_days[i])
}
toc(log = TRUE)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
for(i in 1:nrow(df_results)) {
df_results$neg_eq[i] <-
test_neg_equity(df,
startdate = df_results$date[i],
lead_days = df_results$lead_days[i])
}
# 9.5 Using multiple cores in R ------------------------------------------------
install.packages("doParallel")
library(doParallel)
maxcores <- 8
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
View(cl)
View(cl)
registerDoParallel(cl)
cl <- makeCluster(Cores)
registerDoParallel(cl)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df_results),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr')
) %dopar%
tibble(
date = df_results$date[i],
lead_days = df_results$lead_days[i],
neg_eq =
test_neg_equity(
df,
startdate = df_results$date[i],
lead_days = df_results$lead_days[i]
)
)
stopCluster(cl)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
library(purrr)
tic("purrr")
df_results$neg_eq <-
df %>%
map2_dbl(as.list(df_results$date),
as.list(df_results$lead_days),
test_neg_equity,
df = .)
toc(log = TRUE)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
library(furrr)
plan(multisession, workers = Cores)
tic(paste0("furrr, ", Cores, " cores"))
df_results$neg_eq <-
df %>%
future_map2_dbl(as.list(df_results$date),
as.list(df_results$lead_days),
test_neg_equity,
df = .)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
maxcores <- 12
for (Cores in 1:maxcores) {
plan(multisession, workers = Cores)
tic(paste0("furrr, ", Cores, " cores"))
df_results$neg_eq <-
df %>%
future_map2_dbl(as.list(df_results$date),
as.list(df_results$lead_days),
test_neg_equity,
df = .)
toc(log = TRUE)
}
maxcores <- 16
for (Cores in 1:maxcores) {
plan(multisession, workers = Cores)
tic(paste0("furrr, ", Cores, " cores"))
df_results$neg_eq <-
df %>%
future_map2_dbl(as.list(df_results$date),
as.list(df_results$lead_days),
test_neg_equity,
df = .)
toc(log = TRUE)
}
printTicTocLog() %>%
tail(maxcores) %>%
separate(
`Function type`,
sep = " ",
into = c("Function type", "nCores"),
extra = "drop"
) %>%
mutate(
Seconds = as.numeric(Seconds),
nCores = as.numeric(nCores),
lowered_compute_time = Seconds / lag(Seconds, order_by = nCores) - 1,
theoretical_max = lag(nCores) / nCores - 1
) %>%
ggplot(aes(x = nCores)) +
geom_line(aes(y = lowered_compute_time, col = "Realized performance gain")) +
geom_line(aes(y = theoretical_max, col = "Theoretical performance gain")) +
theme_classic() +
xlab("Number of cores") +
ylab("Lowered compute time by additional core") +
theme(legend.title = element_blank(),
legend.position = 'bottom')
setwd("/Users/susannaroald/Documents/git_assignment_pc/parallel-computing-Susanna-R")
install.packages("parallel")
install.packages("tictoc")
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
library(magrittr)
library(tidyverse)
simDat <-
function(N, type, mu) {
if (type == "tweedie") {
return(rtweedie(
N,
mu = mu,
phi = 100,
power = 1.9
))
}
if (type == "normal") {
return(rnorm(N, mean = mu))
}
else{
stop("invalid distribution")
}
}
simTest <-
function(N, type, mu) {
t.test(simDat(N = N,
type = type,
mu = mu),
mu = mu)$p.value
}
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
for (i in 1:nrow(df)) {
print(i)
df$share_reject[i] <-
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
}
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = .05) +
theme_bw()
results <-
mclappy(1:nrow(df), function(i) {
MTests(df$N[i], df$M[i], df$type[i], .05)
}, mc.cores = detectCores() - 1)
results <- mclappy(1:nrow(df), function(i) {
MTests(df$N[i], df$M[i], df$type[i], .05)
}, mc.cores = detectCores() - 1)
results <- mclapply(1:nrow(df), function(i) {
MTests(df$N[i], df$M[i], df$type[i], .05)
}, mc.cores = detectCores() - 1)
library(parallel)
library(tictoc)
results <- mclapply(1:nrow(df), function(i) {
MTests(df$N[i], df$M[i], df$type[i], .05)
}, mc.cores = detectCores() - 1)
df$share_reject <- unlist(results)
# Assignment 2:
library(parallel)
MTweedieTests <-
function(N,M,sig){
p_values <- mclapply(1:M, function(x) simTweedieTest(N), mc.cores = detectCores())
sum(unlist(p_values) < sig)/M
}
setwd("/Users/susannaroald/Documents/git_assignment_pc/parallel-computing-Susanna-R/scripts\\")
setwd("/Users/susannaroald/Documents/git_assignment_pc/parallel-computing-Susanna-R/scripts\\")
setwd("/Users/susannaroald/Documents/git_assignment_pc/parallel-computing-Susanna-R/scripts\\")
setwd("/Users/susannaroald/Documents/git_assignment_pc/parallel-computing-Susanna-R")
# Time method 1
source("scripts\/method_1.R")
# Time method 1
source("scripts\method_1.R")
# Time method 1
source("scripts/method_1.R")
# Time method 1
source("scripts/method_1.R")
# Time method 1
source("scripts/method_1.R")
tic("Method 1")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc()
# Time method 2
source("scripts/method_2.R")
tic("Method 2")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc()
# Time method 3
source("scripts/method_3.R")
tic("Method 3")
tic("Method 3")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc()
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
results <- foreach(i=1:nrow(df), .combine=c) %dopar% {
MTweedieTests(N=df$N[i], M=df$M[i], sig=.05)
}
stopCluster(cl)
df$share_reject <- results
# Assignment 2. Modifying the MTweedieTests function:
library(furrr)
plan(multiprocess)
MTweedieTests <-
function(N,M,sig){
results <- future_map(1:M, ~simTweedieTest(N))
sum(unlist(results) < sig) / M
}
plan(multisession)
MTweedieTests <-
function(N,M,sig){
results <- future_map(1:M, ~simTweedieTest(N))
sum(unlist(results) < sig) / M
}
# Time method 3
source("scripts/method_3.R")
tic("Method 3")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc()
# Rewriting lines 29-35 by using mclapply
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
results <- foreach(i = 1:nrow(df), .combine = 'c') %dopar% {
MTweedieTests(N = df$N[i], M = df$M[i], sig = .05)
}
if(length(results) == nrow(df)) {
df$share_reject <- results
} else {
stop("Mismatch between results length and number of rows in df!")
}
stopCluster(cl)
# Assignment 1:
library(tweedie)
library(ggplot2)
# Rewriting lines 29-35 by using mclapply
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
results <- foreach(i = 1:nrow(df), .combine = 'c') %dopar% {
MTweedieTests(N = df$N[i], M = df$M[i], sig = .05)
}
stopCluster(cl)
if(length(results) == nrow(df)) {
df$share_reject <- results
} else {
stop("Mismatch between results length and number of rows in df!")
}
# Time method 2
source("scripts/method_2.R")
tic("Method 2")
library(tictoc)
source("scripts/method_2.R")
maxcores <- 8
Cores <- min(parallel::detectCores(), maxcores)
cl <- makeCluster(Cores)
registerDoParallel(cl)
results <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr')
) %dopar%
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = .05)
stopCluster(cl)
results <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = .05)
# Rewriting lines 29-35
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
results <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = .05)
stopCluster(cl)
# Time method 2
source("scripts/method_2.R")
tic("Method 2")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc()
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Test")
Sys.sleep(1)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Time method 1
source("scripts/method_1.R")
tic.clearlog()
tic("Method 1")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Time method 2
source("scripts/method_2.R")
tic.clearlog()
tic("Method 2")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
tic(paste0("Method 2"))
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
tic("Method 2")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Time method 1
source("scripts/method_1.R")
tic("Method 1")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Time method 3
source("scripts/method_3.R")
tic("Method 3")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc()
tic("Method 3")
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = 0.05) +
theme_bw()
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
